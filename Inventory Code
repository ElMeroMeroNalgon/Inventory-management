import React, { useState } from 'react';
import * as XLSX from 'xlsx';

const App = () => {
  const [productos, setProductos] = useState([
    { id: 1, nombre: 'Cuaderno', cantidad: 50, precio: 2500 },
    { id: 2, nombre: 'Bolígrafo', cantidad: 100, precio: 800 },
    { id: 3, nombre: 'Lápiz', cantidad: 80, precio: 500 },
    { id: 4, nombre: 'Borrador', cantidad: 8, precio: 300 }
  ]);
  
  const [ventas, setVentas] = useState([]);
  const [vista, setVista] = useState('inventario');
  const [ventaForm, setVentaForm] = useState({ producto: '', cantidad: '' });
  const [mensaje, setMensaje] = useState('');
  const [editando, setEditando] = useState(null);

  // Importar Excel
  const importarExcel = (evento) => {
    const archivo = evento.target.files[0];
    if (!archivo) return;
    
    const lector = new FileReader();
    lector.onload = (e) => {
      try {
        const datos = new Uint8Array(e.target.result);
        const libro = XLSX.read(datos, { type: 'array' });
        const hoja = libro.Sheets[libro.SheetNames[0]];
        const json = XLSX.utils.sheet_to_json(hoja, { header: 1 });
        
        const nuevosProductos = [];
        for (let i = 1; i < json.length; i++) { // Saltar encabezado
          const fila = json[i];
          if (fila[0] && fila[1] && fila[2]) {
            nuevosProductos.push({
              id: Date.now() + i,
              nombre: String(fila[0]).trim(),
              cantidad: parseInt(fila[1]) || 0,
              precio: parseFloat(fila[2]) || 0
            });
          }
        }
        
        setProductos(nuevosProductos);
        setMensaje(`✅ Se importaron ${nuevosProductos.length} productos correctamente`);
        setTimeout(() => setMensaje(''), 3000);
      } catch (error) {
        setMensaje('❌ Error al leer el archivo Excel');
        setTimeout(() => setMensaje(''), 3000);
      }
    };
    lector.readAsArrayBuffer(archivo);
    evento.target.value = '';
  };

  // Exportar reportes de ventas
  const exportarReporteVentas = () => {
    if (ventas.length === 0) {
      setMensaje('No hay ventas para exportar');
      setTimeout(() => setMensaje(''), 3000);
      return;
    }

    const datosExport = ventas.map(v => ({
      'Fecha': v.fecha,
      'Producto': v.producto,
      'Cantidad': v.cantidad,
      'Precio Unitario': v.total / v.cantidad,
      'Total': v.total
    }));

    const hoja = XLSX.utils.json_to_sheet(datosExport);
    const libro = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(libro, hoja, 'Reporte Ventas');
    
    const fecha = new Date().toISOString().split('T')[0];
    XLSX.writeFile(libro, `Reporte_Ventas_${fecha}.xlsx`);
    
    setMensaje('✅ Reporte de ventas exportado correctamente');
    setTimeout(() => setMensaje(''), 3000);
  };

  // Exportar inventario final
  const exportarInventarioFinal = () => {
    const datosExport = productos.map(p => ({
      'Nombre del Producto': p.nombre,
      'Cantidad Final': p.cantidad,
      'Precio': p.precio,
      'Valor Total': p.cantidad * p.precio
    }));

    const hoja = XLSX.utils.json_to_sheet(datosExport);
    const libro = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(libro, hoja, 'Inventario Final');
    
    const fecha = new Date().toISOString().split('T')[0];
    XLSX.writeFile(libro, `Inventario_Final_${fecha}.xlsx`);
    
    setMensaje('✅ Inventario final exportado correctamente');
    setTimeout(() => setMensaje(''), 3000);
  };

  // Editar producto
  const iniciarEdicion = (producto) => {
    setEditando({ ...producto });
  };

  const guardarEdicion = () => {
    setProductos(productos.map(p => 
      p.id === editando.id ? editando : p
    ));
    setEditando(null);
    setMensaje('✅ Producto actualizado correctamente');
    setTimeout(() => setMensaje(''), 3000);
  };

  const cancelarEdicion = () => {
    setEditando(null);
  };

  const registrarVenta = () => {
    const producto = productos.find(p => p.id == ventaForm.producto);
    const cantidad = parseInt(ventaForm.cantidad);
    
    if (!producto) {
      setMensaje('❌ Seleccione un producto');
      return;
    }
    
    if (cantidad <= 0 || isNaN(cantidad)) {
      setMensaje('❌ La cantidad debe ser un número positivo');
      return;
    }
    
    if (cantidad > producto.cantidad) {
      setMensaje(`❌ Solo hay ${producto.cantidad} unidades disponibles`);
      return;
    }
    
    // Actualizar stock
    setProductos(productos.map(p => 
      p.id == ventaForm.producto 
        ? { ...p, cantidad: p.cantidad - cantidad }
        : p
    ));
    
    // Registrar venta
    const nuevaVenta = {
      id: Date.now(),
      producto: producto.nombre,
      cantidad: cantidad,
      total: cantidad * producto.precio,
      fecha: new Date().toLocaleString()
    };
    
    setVentas([...ventas, nuevaVenta]);
    setVentaForm({ producto: '', cantidad: '' });
    setMensaje(`✅ Venta registrada: ${cantidad} ${producto.nombre}(s) por $${(cantidad * producto.precio).toLocaleString()}`);
    setTimeout(() => setMensaje(''), 3000);
  };

  const productosAlerta = productos.filter(p => p.cantidad <= 10);
  const gananciaTotal = ventas.reduce((total, v) => total + v.total, 0);

  return (
    <div className="p-6 max-w-7xl mx-auto bg-gray-50 min-h-screen">
      <h1 className="text-4xl font-bold text-blue-600 mb-6 text-center">
        📚 Sistema de Papelería Avanzado
      </h1>
      
      {mensaje && (
        <div className={`p-4 rounded-lg mb-4 font-medium ${
          mensaje.includes('✅') ? 'bg-green-100 text-green-800 border border-green-200' : 'bg-red-100 text-red-800 border border-red-200'
        }`}>
          {mensaje}
        </div>
      )}

      {/* Estadísticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-green-500">
          <h3 className="text-sm font-semibold text-gray-600 uppercase">Ganancias Totales</h3>
          <p className="text-2xl font-bold text-green-600">${gananciaTotal.toLocaleString()}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-blue-500">
          <h3 className="text-sm font-semibold text-gray-600 uppercase">Total Productos</h3>
          <p className="text-2xl font-bold text-blue-600">{productos.length}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-purple-500">
          <h3 className="text-sm font-semibold text-gray-600 uppercase">Ventas Realizadas</h3>
          <p className="text-2xl font-bold text-purple-600">{ventas.length}</p>
        </div>
        <div className="bg-white p-4 rounded-lg shadow-md border-l-4 border-red-500">
          <h3 className="text-sm font-semibold text-gray-600 uppercase">Alertas Stock</h3>
          <p className="text-2xl font-bold text-red-600">{productosAlerta.length}</p>
        </div>
      </div>

      {/* Alertas de stock */}
      {productosAlerta.length > 0 && (
        <div className="bg-red-50 border border-red-200 p-4 rounded-lg mb-6">
          <h3 className="font-bold text-red-800 mb-3 flex items-center">
            ⚠️ Productos con Stock Crítico (≤ 10 unidades)
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
            {productosAlerta.map(p => (
              <div key={p.id} className="bg-white p-3 rounded border border-red-200">
                <p className="font-semibold text-red-800">{p.nombre}</p>
                <p className="text-red-600 text-sm">Stock: {p.cantidad} unidades</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Navegación */}
      <div className="flex flex-wrap gap-2 mb-6">
        <button
          onClick={() => setVista('inventario')}
          className={`px-6 py-3 rounded-lg font-medium transition-all ${
            vista === 'inventario' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-gray-100'
          }`}
        >
          📦 Inventario
        </button>
        <button
          onClick={() => setVista('ventas')}
          className={`px-6 py-3 rounded-lg font-medium transition-all ${
            vista === 'ventas' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-gray-100'
          }`}
        >
          🛒 Vender
        </button>
        <button
          onClick={() => setVista('reportes')}
          className={`px-6 py-3 rounded-lg font-medium transition-all ${
            vista === 'reportes' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-gray-100'
          }`}
        >
          📊 Reportes
        </button>
        <button
          onClick={() => setVista('importar')}
          className={`px-6 py-3 rounded-lg font-medium transition-all ${
            vista === 'importar' ? 'bg-blue-600 text-white shadow-lg' : 'bg-white text-gray-700 hover:bg-gray-100'
          }`}
        >
          📥 Importar Excel
        </button>
      </div>

      {/* Contenido Principal */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        {vista === 'inventario' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold text-gray-800">📦 Gestión de Inventario</h2>
              <div className="text-sm text-gray-600 bg-gray-100 px-3 py-1 rounded">
                Haz clic en ✏️ para editar productos
              </div>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border p-4 text-left font-bold">Producto</th>
                    <th className="border p-4 text-left font-bold">Cantidad</th>
                    <th className="border p-4 text-left font-bold">Precio</th>
                    <th className="border p-4 text-left font-bold">Valor Total</th>
                    <th className="border p-4 text-left font-bold">Estado</th>
                    <th className="border p-4 text-left font-bold">Acciones</th>
                  </tr>
                </thead>
                <tbody>
                  {productos.map(p => (
                    <tr key={p.id} className="hover:bg-gray-50">
                      <td className="border p-4 font-medium">{p.nombre}</td>
                      <td className="border p-4">
                        {editando && editando.id === p.id ? (
                          <input
                            type="number"
                            min="0"
                            value={editando.cantidad}
                            onChange={(e) => setEditando({...editando, cantidad: parseInt(e.target.value) || 0})}
                            className="w-20 p-1 border rounded"
                          />
                        ) : (
                          <span className="font-semibold">{p.cantidad}</span>
                        )}
                      </td>
                      <td className="border p-4">
                        {editando && editando.id === p.id ? (
                          <input
                            type="number"
                            min="0"
                            value={editando.precio}
                            onChange={(e) => setEditando({...editando, precio: parseFloat(e.target.value) || 0})}
                            className="w-24 p-1 border rounded"
                          />
                        ) : (
                          `$${p.precio.toLocaleString()}`
                        )}
                      </td>
                      <td className="border p-4 font-bold text-green-600">
                        ${(p.cantidad * p.precio).toLocaleString()}
                      </td>
                      <td className="border p-4">
                        <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                          p.cantidad <= 10 ? 'bg-red-100 text-red-800' : 
                          p.cantidad <= 20 ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'
                        }`}>
                          {p.cantidad <= 10 ? '🔴 Crítico' : p.cantidad <= 20 ? '🟡 Bajo' : '🟢 Normal'}
                        </span>
                      </td>
                      <td className="border p-4">
                        {editando && editando.id === p.id ? (
                          <div className="flex gap-2">
                            <button
                              onClick={guardarEdicion}
                              className="bg-green-600 text-white px-3 py-1 rounded text-sm hover:bg-green-700"
                            >
                              ✅ Guardar
                            </button>
                            <button
                              onClick={cancelarEdicion}
                              className="bg-gray-500 text-white px-3 py-1 rounded text-sm hover:bg-gray-600"
                            >
                              ❌ Cancelar
                            </button>
                          </div>
                        ) : (
                          <button
                            onClick={() => iniciarEdicion(p)}
                            className="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700"
                          >
                            ✏️ Editar
                          </button>
                        )}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        {vista === 'ventas' && (
          <div>
            <h2 className="text-3xl font-bold mb-6 text-gray-800">🛒 Registrar Nueva Venta</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
              <div>
                <label className="block mb-2 font-semibold text-gray-700">Seleccionar Producto:</label>
                <select
                  value={ventaForm.producto}
                  onChange={(e) => setVentaForm({...ventaForm, producto: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">-- Seleccionar producto --</option>
                  {productos.filter(p => p.cantidad > 0).map(p => (
                    <option key={p.id} value={p.id}>
                      {p.nombre} (Stock: {p.cantidad}) - ${p.precio.toLocaleString()}
                    </option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block mb-2 font-semibold text-gray-700">Cantidad a Vender:</label>
                <input
                  type="number"
                  min="1"
                  value={ventaForm.cantidad}
                  onChange={(e) => setVentaForm({...ventaForm, cantidad: e.target.value})}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="Ingrese cantidad"
                />
              </div>
            </div>
            
            {ventaForm.producto && ventaForm.cantidad && (
              <div className="bg-blue-50 border border-blue-200 p-6 rounded-lg mb-6">
                <h3 className="text-xl font-bold mb-4 text-blue-800">💰 Resumen de la Venta</h3>
                {(() => {
                  const prod = productos.find(p => p.id == ventaForm.producto);
                  const cant = parseInt(ventaForm.cantidad) || 0;
                  const total = cant * (prod?.precio || 0);
                  return (
                    <div className="grid grid-cols-2 gap-4 text-blue-700">
                      <div>
                        <p className="font-medium">Producto: <span className="font-bold">{prod?.nombre}</span></p>
                        <p className="font-medium">Cantidad: <span className="font-bold">{cant}</span></p>
                      </div>
                      <div>
                        <p className="font-medium">Precio unitario: <span className="font-bold">${prod?.precio.toLocaleString()}</span></p>
                        <p className="text-xl font-bold text-green-600">Total: ${total.toLocaleString()}</p>
                      </div>
                    </div>
                  );
                })()}
              </div>
            )}
            
            <button
              onClick={registrarVenta}
              className="bg-green-600 text-white px-8 py-4 rounded-lg hover:bg-green-700 font-bold text-lg transition-all shadow-lg"
            >
              💳 Confirmar y Registrar Venta
            </button>
          </div>
        )}

        {vista === 'reportes' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold text-gray-800">📊 Reportes y Exportación</h2>
              <div className="flex gap-3">
                <button
                  onClick={exportarReporteVentas}
                  className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 font-medium"
                >
                  📤 Exportar Ventas
                </button>
                <button
                  onClick={exportarInventarioFinal}
                  className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-medium"
                >
                  📦 Exportar Inventario
                </button>
              </div>
            </div>
            
            {/* Resumen de estadísticas */}
            <div className="bg-gradient-to-r from-green-50 to-blue-50 p-6 rounded-lg mb-6">
              <h3 className="text-xl font-bold mb-4 text-gray-800">📈 Resumen del Día</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center">
                  <p className="text-2xl font-bold text-green-600">{ventas.length}</p>
                  <p className="text-gray-700">Ventas Realizadas</p>
                </div>
                <div className="text-center">
                  <p className="text-2xl font-bold text-blue-600">
                    {ventas.reduce((total, v) => total + v.cantidad, 0)}
                  </p>
                  <p className="text-gray-700">Productos Vendidos</p>
                </div>
                <div className="text-center">
                  <p className="text-2xl font-bold text-purple-600">${gananciaTotal.toLocaleString()}</p>
                  <p className="text-gray-700">Ingresos Totales</p>
                </div>
              </div>
            </div>

            {ventas.length === 0 ? (
              <div className="text-center py-12 bg-gray-50 rounded-lg">
                <p className="text-gray-500 text-lg">📋 No hay ventas registradas aún</p>
                <p className="text-gray-400 text-sm mt-2">Las ventas aparecerán aquí una vez que registres la primera</p>
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="border p-4 text-left font-bold">Fecha y Hora</th>
                      <th className="border p-4 text-left font-bold">Producto</th>
                      <th className="border p-4 text-left font-bold">Cantidad</th>
                      <th className="border p-4 text-left font-bold">Precio Unit.</th>
                      <th className="border p-4 text-left font-bold">Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {ventas.map(v => (
                      <tr key={v.id} className="hover:bg-gray-50">
                        <td className="border p-4 text-sm">{v.fecha}</td>
                        <td className="border p-4 font-medium">{v.producto}</td>
                        <td className="border p-4 text-center font-semibold">{v.cantidad}</td>
                        <td className="border p-4">${(v.total / v.cantidad).toLocaleString()}</td>
                        <td className="border p-4 font-bold text-green-600">${v.total.toLocaleString()}</td>
                      </tr>
                    ))}
                  </tbody>
                  <tfoot>
                    <tr className="bg-green-50 font-bold">
                      <td colSpan="4" className="border p-4 text-right text-lg">TOTAL GENERAL:</td>
                      <td className="border p-4 text-lg text-green-600">${gananciaTotal.toLocaleString()}</td>
                    </tr>
                  </tfoot>
                </table>
              </div>
            )}
          </div>
        )}

        {vista === 'importar' && (
          <div>
            <h2 className="text-3xl font-bold mb-6 text-gray-800">📥 Importar Datos desde Excel</h2>
            
            <div className="bg-blue-50 border border-blue-200 p-6 rounded-lg mb-6">
              <h3 className="text-xl font-bold text-blue-800 mb-4">📋 Formato Requerido del Archivo Excel</h3>
              <p className="text-blue-700 mb-4">
                El archivo Excel debe tener exactamente <strong>3 columnas</strong> en este orden:
              </p>
              <div className="bg-white border border-blue-300 rounded p-4 mb-4">
                <table className="w-full text-sm">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="border p-2 text-left">Columna A</th>
                      <th className="border p-2 text-left">Columna B</th>
                      <th className="border p-2 text-left">Columna C</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td className="border p-2 font-mono">Nombre del Producto</td>
                      <td className="border p-2 font-mono">Cantidad</td>
                      <td className="border p-2 font-mono">Precio</td>
                    </tr>
                    <tr className="bg-gray-50">
                      <td className="border p-2 font-mono">Cuaderno Universitario</td>
                      <td className="border p-2 font-mono">50</td>
                      <td className="border p-2 font-mono">2500</td>
                    </tr>
                    <tr>
                      <td className="border p-2 font-mono">Bolígrafo Azul</td>
                      <td className="border p-2 font-mono">100</td>
                      <td className="border p-2 font-mono">800</td>
                    </tr>
                  </tbody>
                </table>
              </div>
              <div className="text-blue-600 text-sm">
                ⚠️ <strong>Importante:</strong> La primera fila puede ser de encabezados (se saltará automáticamente)
              </div>
            </div>
            
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-400 transition-all bg-gray-50 hover:bg-blue-50">
              <div className="flex flex-col items-center">
                <div className="text-6xl mb-4">📊</div>
                <h3 className="text-xl font-bold text-gray-700 mb-2">Seleccionar Archivo Excel</h3>
                <p className="text-gray-500 mb-4">Formatos soportados: .xlsx, .xls</p>
                <label className="bg-blue-600 text-white px-6 py-3 rounded-lg cursor-pointer hover:bg-blue-700 font-medium transition-all">
                  🔍 Examinar Archivos
                  <input
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={importarExcel}
                    className="hidden"
                  />
                </label>
              </div>
            </div>

            {productos.length > 0 && (
              <div className="mt-6 p-4 bg-green-50 border border-green-200 rounded-lg">
                <p className="text-green-800 font-medium">
                  ✅ Actualmente hay <strong>{productos.length} productos</strong> cargados en el sistema
                </p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default App;
